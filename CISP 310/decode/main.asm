;=====================================================================
;			HAMMING PARITY DECODER
;	DESCRIPTION:
;	DECODE 11-BIT HAMMING TO 7-BIT DATA PACKET
;	
;=====================================================================

	DOSSEG
	.MODEL  LARGE,BASIC

							;PROCEDURES TO
	EXTRN	CLEAR:FAR		;CLEAR SCREEN
	EXTRN	GETDEC$:FAR		;GET 16-BIT DECIMAL INTEGER
	EXTRN	NEWLINE:FAR		;DISPLAY NEWLINE CHARACTER
	EXTRN	PUTBIN:FAR
	EXTRN	PUTOCT:FAR
	EXTRN	PUTDEC$:FAR
	EXTRN	PUTSTRNG:FAR	;DISPLAY CHARACTER STRING
	EXTRN	PAUSE:FAR		;DISPLAY CHARACTER STRING
	EXTRN	PARITY:FAR
	EXTRN	EVENODD:FAR
	EXTRN	DECODE:FAR
;===================================================================
;
; S T A C K   S E G M E N T   D E F I N I T I O N
;
	.STACK  256

;===================================================================
;
; C O N S T A N T   S E G M E N T   D E F I N I T I O N
;
.CODE
.DATA
HEADER		DB	'INPUT NUMBER TO DECODE: '
REP_B		DB	'BINARY: '
REP_Q		DB	'OCTAL:  '
SPACES		DB	'                        '	;STRATEGICALLY PLACED
B			DB	'B'
Q			DB	'Q'
REP_O		DB	'-- ORIGINAL VALUES --'
REP_E		DB	'-- DECODED  VALUES --'
REP_BB		DB	'BAD BIT: NONE'		;9 CHAR / 13 CHAR
;REP_BUG		DB	'tttttppdpdddpddd'
OVERBIT		DB	'ERROR - VALUE IS GREATER THAN 11 BITS.'
BBITOVR		DB	'ERROR - CALCULATED BAD BIT EXCEEDS 11.'
;DEBUG		DB	'EXECUTED PAST THIS LINE'	;23 CHARS
PAUMSG		DB	'PRESS ANY KEY TO CONTINUE ... '
NAME_IR		DB	' DECODE PROGRAM BY IAN ROSNER '
;===============================================================
;
; D A T A   S E G M E N T   D E F I N I T I O N
;
ENCVAL		DW	?		;CONTAINS INPUT VALUE
BADBIT		DW	0000B
BITMASK		DW	100000000000B	;MASK FOR BAD BIT
;===============================================================
;
; C O D E   S E G M E N T   D E F I N I T I O N
;
	.CODE
	;ASSUME DS:NOTHING,ES:DGROUP
STARTUP:
	MOV		AX,DGROUP		;SET ES TO POINT TO DATA SEG
	MOV		ES,AX
	MOV		DS,AX
	
	LEA		DI,HEADER
	MOV		CX,24
	CALL	PUTSTRNG

	MOV		AX,0
	CALL	GETDEC$		;GET USER INPUT
	MOV		ENCVAL,AX

CHECK_VALID:
	;IS INPUT # MORE THAN 11 BITS?
	PUSH	AX	
	MOV		CL,11
	SHR		AX,CL
	AND		AX,1111H
	.IF		AX > 0
		CALL	NEWLINE
		LEA		DI,OVERBIT
		MOV		CX,37
		CALL	PUTSTRNG
		CALL	NEWLINE
		JMP		STARTUP
	.ENDIF
	POP		AX
	
FIRST_REPORT:
	;ORIGINAL VALUE REPORTING BLOCK
	MOV		BL,1	;USE FOR 16 BIT PUTBIN/OCT
	CALL	NEWLINE
	LEA		DI,REP_O
	MOV		CX,21
	CALL	PUTSTRNG
	CALL	NEWLINE
	;BINARY
	LEA		DI,REP_B
	MOV		CX,8
	CALL	PUTSTRNG
	LEA		DI,B
	MOV		CX,1
	CALL	PUTBIN
	CALL	PUTSTRNG
	CALL	NEWLINE
	;OCTAL
	LEA		DI,REP_Q
	MOV		CX,18
	CALL	PUTSTRNG
	LEA		DI,Q
	MOV		CX,1
	CALL	PUTOCT
	CALL	PUTSTRNG
	CALL	NEWLINE
	CALL	NEWLINE
	
GETBADBIT:		;CALCULATES WHICH BIT, IF ANY, IS BAD
	;MASK PAR8 BITS
	;CALL PARITY
	;EVENODD - BX CONTAINS OUTPUT
	;SHIFT BADBIT, 'OR' WITH RESULT
	MOV		AX,ENCVAL
	AND		AX,1111B
	CALL	PARITY
	CALL	EVENODD
	OR		BADBIT,BX
	SHL		BADBIT,1
	;BIT 4
	MOV		AX,ENCVAL
	AND		AX,11110000B
	CALL	PARITY
	CALL	EVENODD
	OR		BADBIT,BX
	SHL		BADBIT,1
	;BIT 2
	MOV		AX,ENCVAL
	AND		AX,01100110011B
	CALL	PARITY
	CALL	EVENODD
	OR		BADBIT,BX
	SHL		BADBIT,1
	;BIT 1
	MOV		AX,ENCVAL
	AND		AX,10101010101B
	CALL	PARITY
	CALL	EVENODD
	OR		BADBIT,BX
	;NO SHL - ALL BITS IN PLACE
	
	.IF		BADBIT == 0
		JMP	_DECODE
	.ELSEIF	BADBIT > 11
		;PACKET CANNOT EXCEED 11 BITS
		JMP	BB_ERR
	.ENDIF
	;OTHERWISE PROCEED
	
CORRECT_BB:
	;SHIFT MASK RIGHT BY VALUE OF BADBIT
	MOV		CX,BADBIT
	ROR		BITMASK,CL
	MOV		CX,BITMASK
	XOR		ENCVAL,CX
	;VALUE IS NOW CORRECTED
	JMP		_DECODE
	
BB_ERR:
	LEA		DI,BBITOVR
	MOV		CX,37
	CALL	PUTSTRNG
	CALL	NEWLINE
	;RE-INITIALIZE VALUES
	MOV		BADBIT,0000B
	MOV		BITMASK,100000000000B
	JMP		STARTUP

_DECODE:
	MOV		AX,ENCVAL
	CALL	DECODE
	MOV		ENCVAL,AX
	
REPORT:
	LEA		DI,REP_E
	MOV		CX,21
	CALL	PUTSTRNG
	CALL	NEWLINE
	
	LEA		DI,REP_BB
	.IF		BADBIT == 0
		MOV		CX,13
		CALL	PUTSTRNG
	.ELSE
		MOV		CX,9
		CALL	PUTSTRNG
		MOV		AX,BADBIT
		CALL	PUTDEC$
	.ENDIF
	
	MOV		AX,ENCVAL
	MOV		BL,0	;USE FOR 8 BIT PUTBIN/OCT
	;BINARY
	CALL	NEWLINE
	LEA		DI,REP_B
	MOV		CX,8
	CALL	PUTSTRNG	
	LEA		DI,B
	MOV		CX,1
	CALL	PUTBIN
	CALL	PUTSTRNG
	CALL	NEWLINE
	;OCTAL
	LEA		DI,REP_Q
	MOV		CX,13
	CALL	PUTSTRNG
	LEA		DI,Q
	MOV		CX,1
	CALL	PUTOCT
	CALL	PUTSTRNG
	CALL	NEWLINE

DONE:
	CALL	NEWLINE
	CALL	NEWLINE
	LEA		DI,NAME_IR
	MOV		CX,30
	CALL	PUTSTRNG
	CALL	NEWLINE
	LEA		DI,PAUMSG
	CALL PAUSE

	.EXIT
END STARTUP
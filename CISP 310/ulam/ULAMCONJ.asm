;=====================================================================
;			ULAM CONJECTURE PROGAM
;	DESCRIPTION:
;	IF (N == EVEN) N = N / 2
;	ELSE N IS ODD, N = (N * 3) + 1
;
;=====================================================================

	DOSSEG
	.MODEL  SMALL,BASIC

							;PROCEDURES TO
	EXTRN	CLEAR:FAR		;CLEAR SCREEN
	EXTRN	GETDEC:FAR		;GET 16-BIT DECIMAL INTEGER
	EXTRN	NEWLINE:FAR		;DISPLAY NEWLINE CHARACTER
	EXTRN	PUTDEC:FAR		;DISPLAY 16-BIT DECIMAL INTEGER
	EXTRN	PUTSTRNG:FAR	;DISPLAY CHARACTER STRING
	EXTRN	PAUSE:FAR		;DISPLAY CHARACTER STRING
	
;===================================================================
;
; S T A C K   S E G M E N T   D E F I N I T I O N
;
	.STACK  256

;===================================================================
;
; C O N S T A N T   S E G M E N T   D E F I N I T I O N
;
.CODE
.DATA
PROMPT	DB		'ENTER INITIAL VALUE: '
OUTMSG	DB		'VALUES IN SEQUENCE:  '
CNTMSG	DB		'NUMBERS IN SEQUENCE: '
COMMA_	DB		', '
OVRFLW	DB		'WARNING - OVERFLOW - VALUE EXCEEDS 16 BITS.'
PAUMSG	DB		' PRESS ANY KEY TO CONTINUE ... '
NAMEIR	DB		'   IAN ROSNER - ULAM PROG      '
;===============================================================
;
; D A T A   S E G M E N T   D E F I N I T I O N
;
COUNT	DW		0
VALUE	DW		0
;===============================================================
;
; C O D E   S E G M E N T   D E F I N I T I O N
;
	.CODE
	ASSUME DS:NOTHING,ES:DGROUP
PROG:	;INITIALIZE - GET USER INPUT
	MOV		AX,DGROUP		;SET ES TO POINT TO DATA SEG
	MOV		ES,AX
	
	LEA		DI,PROMPT		;PRINT PROMPT
	MOV		CX,21
	CALL	PUTSTRNG
	
	CALL	GETDEC			;GET INPUT
	MOV		VALUE,AX
	CALL	NEWLINE
	MOV		COUNT,0
	
	LEA		DI,OUTMSG		;PRINT HEADER
	CALL	PUTSTRNG
	CALL	NEWLINE
ULAM_LOOP:
	MOV		AX,VALUE
	MOV		BH,0
	CALL	PUTDEC
	CMP		AX,1			;IF VALUE == 1
	JE		FINISH			;SEQUENCE COMPLETE, GOTO END
	LEA		DI,COMMA_		
	MOV		CX,2			;PRINT COMMA
	CALL	PUTSTRNG
	INC		COUNT			;ADD 1 TO COUNTER
	SUB		DX,DX
	;ELSEIF CHECK IF AX EVENLY DIVIDES BY 2 (IF EVEN)
	MOV		BX,2
	DIV		BX
	CMP		DX,0			;IS REMAIN 0?
	JNE		ODDNUM
;	FALL THROUGH TO EVEN SEG->
	;VALUE ALREADY DIVIDED, PROCEED TO STORE
	MOV		VALUE,AX
	JMP		ULAM_LOOP		;PROCEED WITH SEQUENCE
ODDNUM:		;N = (N * 3) + 1
	MOV		AX,VALUE		;LOAD NUMBER
	MOV		BX,3			;MULTIPLY BY 3
	MUL		BX
	JC		OVERFLOW		;JUMP IF CARRY FLAG SET
	ADD		AX,1			;ADD 1
	MOV		VALUE,AX		;STORE NEW AX TO VAR
	JMP		ULAM_LOOP		;CONTINUE SEQUENCE
OVERFLOW:
	CALL	NEWLINE	
	LEA		DI,OVRFLW		;PRINT OVERFLOW MSG
	MOV		CX,43
	CALL	PUTSTRNG
	JMP		QUIT
FINISH:
	CALL	NEWLINE
	LEA		DI,CNTMSG		;PRINT # NUMBERS: 
	MOV		CX,21
	CALL	PUTSTRNG
	MOV		AX,COUNT
	CALL	PUTDEC			;PRINT # COUNT
	JMP		QUIT
QUIT:
	CALL	NEWLINE
	CALL	NEWLINE
	LEA		DI,NAMEIR
	MOV		CX,31
	CALL	PUTSTRNG
	CALL	NEWLINE
	LEA		DI,PAUMSG
	CALL	PAUSE	
	.EXIT
END PROG
;=====================================================================
;			PARITY [MAIN] PROGRAM
;	DESCRIPTION:
;	FINDS PARITY OF 16-BIT INPUT NUMBER
;	
;=====================================================================

	DOSSEG
	.MODEL  LARGE,BASIC

							;PROCEDURES TO
	EXTRN	GETDEC$:FAR		;GET 16-BIT DECIMAL INTEGER
	EXTRN	NEWLINE:FAR		;DISPLAY NEWLINE CHARACTER
	EXTRN	PUTDEC$:FAR		;DISPLAY 16-BIT DECIMAL INTEGER
	EXTRN	PUTSTRNG:FAR	;DISPLAY CHARACTER STRING
	EXTRN	PAUSE:FAR		;DISPLAY CHARACTER STRING
	EXTRN	CALCOFF:FAR
	EXTRN	VALIDATE:FAR
	
;===================================================================
;
; S T A C K   S E G M E N T   D E F I N I T I O N
;
	.STACK  256

;===================================================================
;
; C O N S T A N T   S E G M E N T   D E F I N I T I O N
;
.CODE
.DATA
HEADER		DB	'Calculates what day a date(mm/dd/yyyy) lands on.' ;48
HEADR1		DB	'Input month: ' ;13
HEADR2		DB	'Input day:   '
HEADR3		DB	'Input year:  '
ERR1		DB	'ERROR: INVALID YEAR. (1901-2099 ONLY)' ;37
ERR2		DB	'ERROR: INVALID MONTH. (1-12 ONLY)';33
ERR3		DB	'ERROR: INVALID DAY IN MONTH RANGE.';34
ERR29		DB	'ERROR: THIS IS NOT A LEAP YEAR.';31
COMMA		DB	', ';3
IS_A		DB	' is a ';6
;DEBUG		DB	'EXECUTED PAST THIS LINE'	;23 CHARS
PAUMSG		DB	'PRESS ANY KEY TO CONTINUE ... '
NAME_IR		DB	' DAY PROGRAM BY IAN ROSNER '

MONTHS		DB	'January  $February $March    $April    $May      $June     $July     $August   $September$October  $November $December $'
DAYS		DB	"Sunday   $Monday   $Tuesday  $Wednesday$Thursday $Friday   $Saturday $"
OFFSTS		DB	0,3,3,6,1,4,6,2,5,0,3,5	;OFFSETS PER MONTH - FROM JAN 1ST -> N 1ST
;===============================================================
;
; D A T A   S E G M E N T   D E F I N I T I O N
;
MONTH		DW	?
DAY			DW	?
YEAR		DW	?
IS_LEAP		DW	0

_OFFSET		DW	1	;JAN1ST1901->TUESDAY
;===============================================================
;
; C O D E   S E G M E N T   D E F I N I T I O N
;
	.CODE
	;ASSUME DS:NOTHING,ES:DGROUP
STARTUP:
	MOV		AX,DGROUP		;SET ES TO POINT TO DATA SEG
	MOV		ES,AX
	MOV		DS,AX
	
GETINPUT:
	;GET MONTH, DAY, YEAR
	LEA		DI,HEADER
	MOV		CX,48
	CALL	PUTSTRNG
	CALL	NEWLINE

	LEA		DI,HEADR1
	MOV		CX,13
	CALL	PUTSTRNG
	CALL	GETDEC$
	MOV		MONTH,AX
	
	LEA		DI,HEADR2
	CALL	PUTSTRNG
	CALL	GETDEC$
	MOV		DAY,AX
	
	LEA		DI,HEADR3
	CALL	PUTSTRNG
	CALL	GETDEC$
	MOV		YEAR,AX
	
	;VALIDATE INPUTS
	PUSH	MONTH
	PUSH	DAY
	PUSH	YEAR
	CALL	VALIDATE
	
	;ERROR CHECKING RETURNED FROM VALIDATE BLOCK
	.IF		AX == 35
		JMP SKIPERROR
	.ELSEIF AX == -1
		LEA DI,ERR1
		MOV CX,37
	.ELSEIF AX == -2
		LEA DI,ERR2
		MOV CX,33
	.ELSEIF AX == -3
		LEA DI,ERR3
		MOV CX,34
	.ELSEIF AX == -29
		LEA DI,ERR29
		MOV CX,31
	.ENDIF
	CALL	PUTSTRNG
	CALL	NEWLINE
	CALL	NEWLINE
	JMP		GETINPUT
	
SKIPERROR:
	;GET YEAR OFFSET
	CALL	CALCOFF
	ADD		_OFFSET,AX
	;GET MONTH OFFSET
	.IF MONTH == 1
		JMP		DAYOFFSET
	.ENDIF
	
	SUB		BH, BH
	MOV		CX,MONTH
	DEC		CX
	MOV		DI,CX
	
	MOV		BL,[OFFSTS+DI]
	
	MOV		AX,0
	MOV		AL,BL
	
	MOV		AX,_OFFSET
	ADD		AX,BX
	MOV		_OFFSET,AX

	
DAYOFFSET:
	;GET DAY OFFSET
	;DAYS MOD 7 + OFFSET
	MOV		AX,DAY
	;DEC		AX		;SUBTRACT 1ST OF MONTH
	MOV		CL,7
	DIV		CL
	;REMAINDER - AH
	MOV		AL,AH
	MOV		AH,0
	
	ADD		_OFFSET,AX	;ADD REMAINDER
	
GETWEEKDAY:
	;OFFSET READY FOR FINAL CALC
	MOV		AX,_OFFSET
	MOV		CL,7
	DIV		CL
	;REMAINDER - AH
	MOV		AL,AH
	MOV		AH,0
	;FINAL DAY OFFSET NOW IN AX
	MOV		_OFFSET,AX
	
REPORT:
	LEA		DI,MONTHS	;MONTH
	MOV		AX,MONTH
	DEC		AX
	MOV		CL,10
	MUL		CL
	ADD		DI,AX
	MOV		CX,9
	CALL	PUTSTRNG

	MOV		AX,DAY		;MONTH N
	CALL	PUTDEC$
	
	LEA		DI,COMMA	;MONTH N, 
	MOV		CX,3
	CALL	PUTSTRNG
	
	MOV		AX,YEAR
	CALL	PUTDEC$		;MONTH N, YEAR
	
	LEA		DI,IS_A		;MONTH N, YEAR IS A 
	MOV		CX,6
	CALL	PUTSTRNG
	
	LEA		DI,DAYS		;MONTH N, YEAR IS A __DAY
	MOV		AX,_OFFSET
	MOV		CH,0
	MOV		CL,10
	MUL		CL
	ADD		DI,AX
	MOV		CX,9
	CALL	PUTSTRNG

DONE:
	CALL	NEWLINE
	CALL	NEWLINE
	LEA		DI,NAME_IR
	MOV		CX,27
	CALL	PUTSTRNG
	CALL	NEWLINE
	LEA		DI,PAUMSG
	MOV		CX,30
	CALL PAUSE

	.EXIT
END STARTUP
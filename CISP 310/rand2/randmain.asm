;=====================================================================
;			RAND 2 PROGRAM
;	DESCRIPTION:
;	PRINT 100 RANDOM NUMBERS USING 5555H SEED
;	PRINT 100 RANDOM NUMBERS USING CLOCK SEED
;	DISPLAY TOTALS FOR HIGH, LOW, EVEN, ODD
;=====================================================================

	DOSSEG
	.MODEL  LARGE,BASIC

							;PROCEDURES TO
	EXTRN	CLEAR:FAR		;CLEAR SCREEN
	EXTRN	GETDEC:FAR		;GET 16-BIT DECIMAL INTEGER
	EXTRN	NEWLINE:FAR		;DISPLAY NEWLINE CHARACTER
	EXTRN	PUTDEC$:FAR		;DISPLAY 16-BIT DECIMAL INTEGER
	EXTRN	PUTSTRNG:FAR	;DISPLAY CHARACTER STRING
	EXTRN	PAUSE:FAR		;DISPLAY CHARACTER STRING
	EXTRN	RANDOM:FAR
	EXTRN	RESEED:FAR
	
;===================================================================
;
; S T A C K   S E G M E N T   D E F I N I T I O N
;
	.STACK  256

;===================================================================
;
; C O N S T A N T   S E G M E N T   D E F I N I T I O N
;
.CODE
.DATA
SPACES		DB	'            '
;DEBUG		DB	'EXECUTED PAST THIS LINE'
HEADR1		DB	'ROUND 1 - 5555H SEED: '
HEADR2		DB	'ROUND 2 - CLOCK SEED: '
PAUMSG		DB	'PRESS ANY KEY TO CONTINUE ... '
TOTAL		DB	'GRAND TOTALS FOR BOTH ROUNDS: '
;STAT STRINGS - 12 CHARS LONG
HIMSG		DB	'HIGH COUNT: '
LOMSG		DB	'LOW  COUNT: '
ODMSG		DB	'ODD  COUNT: '
EVMSG		DB	'EVEN COUNT: '
;RANGE VALUES
UPPER		DW	9999
LOWER		DW	0
;===============================================================
;
; D A T A   S E G M E N T   D E F I N I T I O N
;
SEED		DW	5555H
COUNT		DW	?
LINECT		DW	10		;DETERMINES WHEN TO NEWLINE
;ROUND 1 STAT VARS
R1HI		DW	0
R1LO		DW	0
R1EVEN		DW	0
R1ODD		DW	0
;ROUND 2 STAT VARS
R2HI		DW	0
R2LO		DW	0
R2EVEN		DW	0
R2ODD		DW	0
;===============================================================
;
; C O D E   S E G M E N T   D E F I N I T I O N
;
	.CODE
	;ASSUME DS:NOTHING,ES:DGROUP
STARTUP:
	MOV		AX,DGROUP		;SET ES TO POINT TO DATA SEG
	MOV		ES,AX
	
	MOV		AX,DGROUP
	MOV		DS,AX
	;MOV		AX,SEED
			
	LEA		DI,HEADR1
	MOV		CX,22
	CALL	PUTSTRNG
	CALL	NEWLINE
	CALL	NEWLINE
	
	MOV		COUNT,100		;100 CALLS
RANDLOOP:	;5555H SEED
			PUSH	LOWER					; PUSH LOWER FIRST
			PUSH	UPPER					; THEN UPPER	
			CALL	RANDOM					; GET RANDOM
			
			MOV		BH,-1		;LEFT-JUSTIFY IN 6-CHAR FIELD
			CALL	PUTDEC$
			;PRINT SPACES OR NEW LINE?
			DEC		LINECT
			.IF LINECT == 0
				CALL	NEWLINE
				MOV		LINECT,10	;RESET COUNT
			.ELSE
				LEA		DI,SPACES
				MOV		CX,2		;SPACES
				CALL	PUTSTRNG
			.ENDIF
			
			DEC		COUNT
			;JMP		GETSTAT1
GETSTAT1:
	;DO THINGS
	PUSH	AX		;SAVE AX,
	MOV		DX,0	;CLEAR DX
	MOV		CX,2	;DIV BY 2
	DIV		CX
	
	.IF	DX == 0		;REMAINDER?
		INC		R1EVEN
	.ELSE
		INC		R1ODD
	.ENDIF
	POP		AX
	
	.IF	AX > 5000
		INC		R1HI
	.ELSE
		INC		R1LO
	.ENDIF
	
	CMP		COUNT,0
	JNE		RANDLOOP
	;FALL-THROUGH TO REPORT STATS
	CALL	NEWLINE
	MOV		CX,12		;STAT STRS - 12 CHARS
	
	LEA		DI,HIMSG
	CALL	PUTSTRNG
	MOV		AX,R1HI
	CALL	PUTDEC$
	CALL	NEWLINE
	
	LEA		DI,LOMSG
	CALL	PUTSTRNG
	MOV		AX,R1LO
	CALL	PUTDEC$
	CALL	NEWLINE
	
	LEA		DI,EVMSG
	CALL	PUTSTRNG
	MOV		AX,R1EVEN
	CALL	PUTDEC$
	CALL	NEWLINE
	
	LEA		DI,ODMSG
	CALL	PUTSTRNG
	MOV		AX,R1ODD
	CALL	PUTDEC$
	CALL	NEWLINE
	
	LEA		DI,PAUMSG
	MOV		CX,30
	CALL	PAUSE
	CALL	NEWLINE
R2SETUP:
	;PRINT HEADER
	LEA		DI,HEADR2
	MOV		CX,22
	CALL	PUTSTRNG
	CALL	NEWLINE
	CALL	NEWLINE
	
	MOV		COUNT,100	;REFILL COUNTER
	CALL	RESEED
R2LOOP:		;CLOCK SEED
			PUSH	LOWER					; PUSH LOWER FIRST
			PUSH	UPPER					; THEN UPPER	
			CALL	RANDOM					; GET RANDOM
			
			MOV		BH,-1					;LEFT-JUSTIFY IN 6-CHAR FIELD
			CALL	PUTDEC$
			;PRINT SPACES OR NEW LINE?
			DEC		LINECT
			.IF LINECT == 0
				CALL	NEWLINE
				MOV		LINECT,10			;RESET COUNT
			.ELSE
				LEA		DI,SPACES
				MOV		CX,2				;SPACES
				CALL	PUTSTRNG
			.ENDIF
			
			DEC		COUNT
GETSTAT2:
	;DO THINGS
	PUSH	AX		;SAVE AX,
	MOV		DX,0	;CLEAR DX
	MOV		CX,2	;DIV BY 2
	DIV		CX
	
	.IF	DX == 0		;REMAINDER?
		INC		R2EVEN
	.ELSE
		INC		R2ODD
	.ENDIF
	POP		AX
	
	.IF	AX > 5000
		INC		R2HI
	.ELSE
		INC		R2LO
	.ENDIF
	
	CMP		COUNT,0
	JNE		R2LOOP
	;FALL-THROUGH TO REPORT STATS
	CALL	NEWLINE
	MOV		CX,12		;STAT STRS - 12 CHARS
	
	LEA		DI,HIMSG
	CALL	PUTSTRNG
	MOV		AX,R2HI
	CALL	PUTDEC$
	CALL	NEWLINE
	
	LEA		DI,LOMSG
	CALL	PUTSTRNG
	MOV		AX,R2LO
	CALL	PUTDEC$
	CALL	NEWLINE
	
	LEA		DI,EVMSG
	CALL	PUTSTRNG
	MOV		AX,R2EVEN
	CALL	PUTDEC$
	CALL	NEWLINE
	
	LEA		DI,ODMSG
	CALL	PUTSTRNG
	MOV		AX,R2ODD
	CALL	PUTDEC$
	CALL	NEWLINE
	CALL	NEWLINE
TOTALS:
	LEA		DI,TOTAL
	MOV		CX,30
	CALL	PUTSTRNG
	
	MOV		CX,12		;STAT STRS - 12 CHARS
	
	LEA		DI,HIMSG
	CALL	PUTSTRNG
	MOV		AX,R1HI
	ADD		AX,R2HI
	CALL	PUTDEC$
	CALL	NEWLINE
	
	LEA		DI,LOMSG
	CALL	PUTSTRNG
	MOV		AX,R1LO
	ADD		AX,R2LO
	CALL	PUTDEC$
	CALL	NEWLINE
	
	LEA		DI,EVMSG
	CALL	PUTSTRNG
	MOV		AX,R1EVEN
	ADD		AX,R2EVEN
	CALL	PUTDEC$
	CALL	NEWLINE
	
	LEA		DI,ODMSG
	CALL	PUTSTRNG
	MOV		AX,R1ODD
	ADD		AX,R2ODD
	CALL	PUTDEC$
	CALL	NEWLINE
DONE:
	LEA		DI,PAUMSG
	MOV		CX,30
	CALL PAUSE
	.EXIT
END STARTUP